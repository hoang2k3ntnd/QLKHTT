using Microsoft.EntityFrameworkCore;
using OnlineCourse.Data;

public class UserAccessRepository : IUserAccessRepository
{
    private readonly AppDbContext _context;

    public UserAccessRepository(AppDbContext context)
    {
        _context = context;
    }

    public async Task<ICollection<string>> GetUserRolesAsync(int userId)
    {
        return await _context.UserRoles
            .Where(ur => ur.UserId == userId)
            .Join(_context.Roles, ur => ur.RoleId, r => r.RoleId, (ur, r) => r.RoleName)
            .ToListAsync();
    }

    public async Task<ICollection<string>> GetUserPermissionsAsync(int userId)
    {
        return await (from ur in _context.UserRoles
                      join rp in _context.RolePermissions on ur.RoleId equals rp.RoleId
                      join p in _context.Permissions on rp.PermissionId equals p.PermissionId
                      where ur.UserId == userId
                      select p.PermissionName).Distinct().ToListAsync();
    }

    public async Task<bool> HasPermissionAsync(int userId, string permissionName)
    {
        return await (from ur in _context.UserRoles
                      join rp in _context.RolePermissions on ur.RoleId equals rp.RoleId
                      join p in _context.Permissions on rp.PermissionId equals p.PermissionId
                      where ur.UserId == userId && p.PermissionName == permissionName
                      select p).AnyAsync();
    }
}
