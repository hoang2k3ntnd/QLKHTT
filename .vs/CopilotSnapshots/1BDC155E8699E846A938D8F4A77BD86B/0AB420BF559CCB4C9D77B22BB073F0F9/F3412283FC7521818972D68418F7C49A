using Microsoft.EntityFrameworkCore;
using OnlineCourse.Data;
using OnlineCourse.Repository.Interfaces;

namespace OnlineCourse.Repository.Implementations
{
    public class Repository<TEntity> : IRepository<TEntity> where TEntity : class
    {
        protected readonly AppDbContext _context;
        protected readonly DbSet<TEntity> _db;

        public Repository(AppDbContext context)
        {
            _context = context;
            _db = _context.Set<TEntity>();
        }

        public virtual async Task<IEnumerable<TEntity>> GetAllAsync() => await _db.ToListAsync();

        public virtual async Task<TEntity?> GetByIdAsync(Guid id) => await _db.FindAsync(id);

        public virtual async Task AddAsync(TEntity entity)
        {
            await _db.AddAsync(entity);
            await _context.SaveChangesAsync();
        }

        public virtual async Task UpdateAsync(TEntity entity)
        {
            _db.Update(entity);
            await _context.SaveChangesAsync();
        }

        public virtual async Task DeleteAsync(int id)
        {
            var entity = await GetByIdAsync(id);
            if (entity != null)
            {
                _db.Remove(entity);
                await _context.SaveChangesAsync();
            }
        }
    }
}
